name: Build and Deploy to EC2 (Vite)

on:
  push:
    branches: [ "production" ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Node 20 or 22 LTS works for Vite 6
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Optional: override env for production using repo secrets
      # If you donâ€™t need overrides, you can remove this step.
      - name: Create .env.production from secrets
        run: |
          cat > .env.production << 'EOF'
          VITE_AUTH_BASE_URL=${{ secrets.VITE_AUTH_BASE_URL }}
          VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
          VITE_USER_API_BASE_URL=${{ secrets.VITE_USER_API_BASE_URL }}
          VITE_SECURE_LOCAL_STORAGE_PREFIX=${{ secrets.VITE_SECURE_LOCAL_STORAGE_PREFIX }}
          VITE_SESSION_TIME_OUT=${{ secrets.VITE_SESSION_TIME_OUT }}
          VITE_APPLICATION_ID=${{ secrets.VITE_APPLICATION_ID }}
          VITE_STATE_NAME=${{ secrets.VITE_STATE_NAME }}
          VITE_STATE_CODE=${{ secrets.VITE_STATE_CODE }}
          VITE_SERVER_SK=${{ secrets.VITE_SERVER_SK }}
          VITE_LOG_HTTP_ERRORS=${{ secrets.VITE_LOG_HTTP_ERRORS }}
          EOF
        shell: bash

      - name: Build
        # Vite picks .env.production automatically on production builds
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          if-no-files-found: error

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          install -m 600 /dev/null ~/.ssh/id_deploy
          printf "%s" "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_deploy
          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Upload build to EC2 (rsync)
        run: |
          TS=$(date +%Y%m%d%H%M%S)
          RELEASE_DIR="${{ secrets.EC2_TARGET_DIR }}"/releases/$TS
          ssh -i ~/.ssh/id_deploy ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p $RELEASE_DIR"
          rsync -az --delete -e "ssh -i ~/.ssh/id_deploy" dist/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:$RELEASE_DIR/

      - name: Activate new release
        run: |
          TS=$(date +%Y%m%d%H%M%S)
          RELEASE_DIR="${{ secrets.EC2_TARGET_DIR }}"/releases/$TS
          ssh -i ~/.ssh/id_deploy ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "ln -sfn $RELEASE_DIR ${{ secrets.EC2_TARGET_DIR }}/current && sudo systemctl reload nginx || sudo systemctl restart nginx"